Index: portal/models.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from django.contrib.auth.models import User\nfrom django.db import models\nfrom django.shortcuts import reverse\nfrom django.utils import timezone\n\nfrom . import choices\n\n\nclass Junta(models.Model):\n    user = models.OneToOneField(User, on_delete=models.CASCADE, related_name='junta')\n    profile_pic = models.ImageField(blank=True)\n    role = models.CharField(max_length=32, choices=choices.ROLES_CHOICES, default=choices.VOTER)\n\n    def image_tag(self):\n        from django.utils.html import escape, format_html\n        try:\n            return format_html('<img src=\"%s\" width=\"150\" height=\"150\"/>' % escape(self.profile_pic.url))\n        except ValueError:\n            return format_html('No profile pic')\n\n    image_tag.short_description = user\n    image_tag.allow_tags = True\n\n    def __str__(self):\n        return '{} {}'.format(self.user.first_name, self.user.last_name)\n\n\nclass Candidate(models.Model):\n    user = models.ForeignKey(Junta, on_delete=models.CASCADE, related_name='candidate')\n    bio = models.TextField(blank=True)\n    position = models.CharField(max_length=64, choices=choices.POSITION_CHOICES, default=choices.VP)\n    videos = models.FileField(blank=True)\n    agenda = models.FileField(blank=True)\n    key_points = models.TextField(blank=True)\n\n    def __str__(self):\n        return '{} {}'.format(self.user.user.first_name, self.user.user.last_name)\n\n\nclass Question(models.Model):\n    asked_by = models.ForeignKey(Junta, on_delete=models.CASCADE, related_name='questions_submitted')\n    asked_to = models.ForeignKey(Candidate, on_delete=models.CASCADE, related_name='question_asked')\n    question = models.CharField(max_length=1024)\n    approved = models.BooleanField(default=False)\n    approved_by = models.ForeignKey(Junta, on_delete=models.CASCADE, related_name='questions_approved', default=1)\n    answer = models.TextField(blank=True)\n    answered = models.BooleanField(default=False)\n    asked_on = models.DateTimeField(blank=True)\n    answered_on = models.DateTimeField(blank=True)\n    upvotes = models.ManyToManyField(Junta, related_name='question_upvoted')\n    downvotes = models.ManyToManyField(Junta, related_name='question_downvoted')\n\n    class Meta:\n        ordering = ['asked_on']\n\n    @staticmethod\n    def approve_questions(queryset):\n        queryset.update(approved=True)\n\n    def __str__(self):\n        return '{}'.format(self.question)\n\n    def get_absolute_url(self):\n        return reverse(\"portal:question\", kwargs={'pk': self.pk})\n\n    def get_upvote_api_url(self):\n        return reverse(\"portal:api-upvote\", kwargs={'pk': self.pk})\n\n    def get_downvote_api_url(self):\n        return reverse(\"portal:api-downvote\", kwargs={'pk': self.pk})\n\n    def save(self, *args, **kwargs):\n        if not self.id:\n            self.asked_on = timezone.now()\n            self.answered_on = self.asked_on\n        if len(self.answer) > 0 and self.answered:\n            self.answered_on = timezone.now()\n\n        return super(Question, self).save(*args, **kwargs)\n\n\nclass Comment(models.Model):\n    comment_by = models.ForeignKey(Junta, on_delete=models.CASCADE, related_name='comments_submitted')\n    question = models.ForeignKey(Question, on_delete=models.CASCADE, related_name='comments')\n    comment = models.CharField(max_length=1024, blank=True)\n    approved = models.BooleanField(default=False)\n    approved_by = models.ForeignKey(Junta, on_delete=models.CASCADE, related_name='comments_approved', default=1)\n    commented_on = models.DateTimeField(blank=True)\n    upvotes = models.ManyToManyField(Junta, related_name='comments_upvoted')\n    downvotes = models.ManyToManyField(Junta, related_name='comments_downvoted')\n\n    class Meta:\n        ordering = ['commented_on']\n\n    @staticmethod\n    def approve_comments(queryset):\n        queryset.update(approved=True)\n\n    def __str__(self):\n        return '{}'.format(self.comment)\n\n    def get_absolute_url(self):\n        return reverse(\"portal:comment\", kwargs={'pk': self.pk})\n\n    def get_upvote_api_url(self):\n        return reverse(\"portal:api-upvote-comment\", kwargs={'pk': self.pk})\n\n    def get_downvote_api_url(self):\n        return reverse(\"portal:api-downvote-comment\", kwargs={'pk': self.pk})\n\n    def save(self, *args, **kwargs):\n        if not self.id:\n            self.commented_on = timezone.now()\n\n        return super(Comment, self).save(*args, **kwargs)\n\n\nclass Hostel(models.Model):\n    name = models.CharField(max_length=64)\n    total_residents = models.IntegerField(default=0)\n    no_of_votes = models.IntegerField(default=0)\n\n    def __str__(self):\n        return '{}'.format(self.name)\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- portal/models.py	(revision 52073e65c909dc5b2d42774c0b67219d2c65425e)
+++ portal/models.py	(date 1581160559685)
@@ -42,7 +42,7 @@
     asked_to = models.ForeignKey(Candidate, on_delete=models.CASCADE, related_name='question_asked')
     question = models.CharField(max_length=1024)
     approved = models.BooleanField(default=False)
-    approved_by = models.ForeignKey(Junta, on_delete=models.CASCADE, related_name='questions_approved', default=1)
+    approved_by = models.ForeignKey(Junta, on_delete=models.CASCADE, related_name='questions_approved', null=True)
     answer = models.TextField(blank=True)
     answered = models.BooleanField(default=False)
     asked_on = models.DateTimeField(blank=True)
@@ -84,7 +84,7 @@
     question = models.ForeignKey(Question, on_delete=models.CASCADE, related_name='comments')
     comment = models.CharField(max_length=1024, blank=True)
     approved = models.BooleanField(default=False)
-    approved_by = models.ForeignKey(Junta, on_delete=models.CASCADE, related_name='comments_approved', default=1)
+    approved_by = models.ForeignKey(Junta, on_delete=models.CASCADE, related_name='comments_approved', null=True)
     commented_on = models.DateTimeField(blank=True)
     upvotes = models.ManyToManyField(Junta, related_name='comments_upvoted')
     downvotes = models.ManyToManyField(Junta, related_name='comments_downvoted')
